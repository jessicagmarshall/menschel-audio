{"version":3,"sources":["components/Main.js","App.js","serviceWorker.js","index.js"],"names":["columns","Header","accessor","Main","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","rowContent","input","output","id","audio","paused","tagList","rowBlue","flashingTime","numFlashes","nextRow","injectThProps","bind","assertThisInitialized","generateSet","flashBar","outcome","_this2","audioUrl","setState","console","log","setTimeout","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","getNextIndex","sent","undefined","data","fetch","then","res","json","duration","rowIndex","stop","indexArray","audioArray","outputTag","getRandomInt","length","i","push","nextIndex","min","max","Math","ceil","floor","random","rowInfo","column","style","display","flashDuration","_this3","_this4","document","URL","substr","react_default","createElement","lib_default","url","playStatus","Sound","status","PAUSED","PLAYING","es","showPagination","sortable","loadingText","defaultPageSize","getTdProps","instance","onClick","e","handleOriginal","index","background","color","getTheadThProps","minRows","position","width","backgroundColor","bottom","height","Component","App","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9098f017.chunk.js","sourcesContent":["/* global fetch */\n\nimport React, { Component } from 'react'\nimport ReactTable from 'react-table'\nimport Sound from 'react-sound'\nimport 'react-table/react-table.css'\nimport data from '../data/data'\n\nconst columns = [{\n  Header: 'Input Tag',\n  accessor: 'input'\n}, {\n  Header: 'Output Tag',\n  accessor: 'output'\n}, {\n  Header: 'Audio ID',\n  accessor: 'audio'\n}]\n\nclass Main extends Component {\n  constructor () {\n    super()\n    this.state = {\n      rowContent: {input: '', output: '', id: ''},\n      audio: '',\n      paused: false,\n      tagList: [0, 1, 2, 3, 4, 5], // eventually replace this with yonatan's actual tags\n      rowBlue: false,\n      flashingTime: 10, // how many seconds before the end should the bottom bar begin flashing\n      numFlashes: 0,\n      nextRow: ''\n    }\n    this.injectThProps = this.injectThProps.bind(this)\n    this.generateSet = this.generateSet.bind(this)\n    // this.togglePaused = this.togglePaused.bind(this)\n    this.flashBar = this.flashBar.bind(this)\n  }\n\n  componentWillMount () {\n    this.generateSet()\n  }\n\n  generateSet (input) {\n    if (this.state.audioUrl !== '') {\n      this.setState({audioUrl: ''})\n    }\n    let nextRow, outcome\n    this.state.rowContent.id === ''\n      ? console.log('randomly generate an input tag for the first audio file')\n      : console.log('end of audio file', this.state.rowContent.id, 'with output tag', this.state.rowContent.output)\n    setTimeout(async () => {\n      outcome = await this.getNextIndex()\n      input === undefined\n        // there is a console.log in this.getNextIndex\n        ? nextRow = outcome[0]\n        : nextRow = input\n      setTimeout(() => {\n        console.log('collecting all audio files with input tag', data[nextRow].input, ':', outcome[1])\n        setTimeout(() => {\n          console.log('randomly select audio file', data[nextRow].audio, 'from list of files with input tag', data[nextRow].input, 'and fetch it from the server')\n          fetch('http://sentient-computer.local:3003/audioDuration?id=' + nextRow)\n            .then(res => {\n              res.json()\n                .then(res => {\n                  setTimeout(() => {\n                    console.log('start playing clip', data[nextRow].audio)\n                    this.setState({\n                      duration: res.duration,\n                      rowIndex: nextRow,\n                      rowContent: {input: data[nextRow].input, output: data[nextRow].output, id: data[nextRow].audio},\n                      audioUrl: 'http://sentient-computer.local:3003/audio?id=' + nextRow\n                    })\n                    // begin flashing this.state.flashingTime seconds before the end of the sound clip\n                    setTimeout(this.flashBar, 1000 * (this.state.duration - this.state.flashingTime))\n                  }, 4000)\n                })\n            })\n        }, 6000)\n      }, 4000)\n    }, 4000)\n  }\n\n  async getNextIndex () {\n    let indexArray = []\n    let audioArray = []\n    let outputTag\n    let nextIndex\n    this.state.rowContent.output === ''\n      ? outputTag = this.state.tagList[this.getRandomInt(0, this.state.tagList.length)]\n      : outputTag = this.state.rowContent.output\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].input === outputTag) {\n        indexArray.push(i)\n        audioArray.push(data[i].audio)\n      }\n    }\n    console.log('next input tag is', outputTag)\n    nextIndex = this.getRandomInt(0, indexArray.length)\n    return [indexArray[nextIndex], audioArray]\n  }\n\n  getRandomInt (min, max) {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min)) + min\n  }\n\n  injectThProps (state, rowInfo, column) {\n    return {\n      style: { display: 'none' }\n    }\n  }\n\n  // togglePaused () {\n  //   this.state.paused\n  //     ? this.setState({paused: false})\n  //     : this.setState({paused: true})\n  // }\n\n  flashBar () {\n    this.setState({rowBlue: !this.state.rowBlue, numFlashes: this.state.numFlashes + 1})\n    let flashDuration\n    if (this.state.numFlashes < 35) {\n      this.state.numFlashes < 9\n        ? flashDuration = this.state.flashingTime / 20 // 8 flashes at 1/20 of the time\n        : this.state.numFlashes < 25\n          ? flashDuration = this.state.flashingTime / 40 // 16 flashes at 1/40 of the time\n          : flashDuration = this.state.flashingTime / 80 // 10 flashes at 1/80 of the time\n      setTimeout(this.flashBar,\n        1000 * flashDuration\n      )\n    } else {\n      setTimeout(() => {\n        this.setState({numFlashes: 0, rowBlue: !this.state.rowBlue})\n      }, 1000 * this.state.flashingTime / 80)\n      this.generateSet()\n    }\n  }\n\n  render () {\n    console.log(document.URL.substr(0, document.URL.length - 5))\n    return (\n      <div>\n        <Sound url={this.state.audioUrl || ''}\n          playStatus={this.state.paused ? Sound.status.PAUSED : Sound.status.PLAYING}\n        />\n        <ReactTable\n          data={data}\n          columns={columns}\n          showPagination={false}\n          sortable={false}\n          loadingText={null}\n          defaultPageSize={data.length + 2}\n          getTdProps={(state, rowInfo, column, instance) => {\n            if (typeof rowInfo !== 'undefined') {\n              return {\n                onClick: (e, handleOriginal) => {\n                  this.generateSet(rowInfo.index)\n                },\n                style: {\n                  background: rowInfo.index !== this.state.rowIndex ? 'white' : this.state.rowBlue ? 'purple' : 'yellow',\n                  color: rowInfo.index !== this.state.rowIndex ? 'black' : this.state.rowBlue ? 'white' : 'black'\n                }\n              }\n            } else {\n              return {}\n            }\n          }}\n        />\n        <ReactTable\n          data={[{\n            input: this.state.rowContent.input,\n            output: this.state.rowContent.output,\n            audio: this.state.rowContent.id\n          }]}\n          columns={columns}\n          getTheadThProps={this.injectThProps}\n          showPagination={false}\n          sortable={false}\n          minRows={1}\n          loadingText={null}\n          style={{\n            position: 'fixed',\n            width: '100%',\n            backgroundColor: this.state.rowBlue ? 'purple' : 'yellow',\n            color: this.state.rowBlue ? 'white' : 'black',\n            bottom: 0,\n            height: 60}}\n          getTdProps={(state, rowInfo, column, instance) => {\n            return {\n              onClick: (e, handleOriginal) => {\n                // this.togglePaused()\n              }\n            }\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Main\n","import React, { Component } from 'react'\nimport Main from './components/Main'\n\nclass App extends Component {\n  render () {\n    return (\n      <Main />\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}